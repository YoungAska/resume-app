import streamlit as st
import fitz  # PyMuPDF
import requests

# --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF ---
def extract_text_from_pdf(uploaded_file):
    doc = fitz.open(stream=uploaded_file.read(), filetype="pdf")
    return "\n".join([page.get_text() for page in doc])

# --- –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—é–º–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º ---
def score_resume(text):
    score = 0
    report = []

    checks = [
        ("—Ç–µ–ª–µ—Ñ–æ–Ω", 10, "–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤"),
        ("–∑–≤–æ–Ω–∫", 10, "–û–ø—ã—Ç –∑–≤–æ–Ω–∫–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞–º"),
        ("–ø–µ—Ä–µ–≥–æ–≤–æ—Ä", 10, "–£—á–∞—Å—Ç–∏–µ –≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞—Ö"),
        ("–ø—Ä–æ–¥–∞–∂", 10, "–û–ø—ã—Ç –ø—Ä–æ–¥–∞–∂"),
        ("–∫–ª–∏–µ–Ω—Ç", 5, "–†–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏"),
        ("1—Å", 5, "–û–ø—ã—Ç —Å 1–°"),
        ("crm", 3, "–†–∞–±–æ—Ç–∞ —Å CRM-—Å–∏—Å—Ç–µ–º–∞–º–∏"),
        ("–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω", 5, "–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"),
        ("–¥–µ—Ç–∞–ª", 5, "–í–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º"),
        ("—É–¥–∞–ª–µ–Ω", 2, "–û–ø—ã—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã"),
    ]

    penalties = [
        ("–≥–æ—Å", -5, "–û–ø—ã—Ç –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö"),
        ("–º–µ–Ω—å—à–µ –≥–æ–¥–∞", -5, "–†–∞–±–æ—Ç–∞ –Ω–∞ –º–µ—Å—Ç–µ –º–µ–Ω—å—à–µ –≥–æ–¥–∞"),
    ]

    text = text.lower()

    if "—Ä–∞—Ä—É—Å" in text and "–Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è" in text:
        return -999, ["‚ùå –†–∞–±–æ—Ç–∞–µ—Ç –≤ ¬´–†–∞—Ä—É—Å¬ª –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è ‚Äî –∞–≤—Ço–æ—Ç–∫–∞–∑"]

    for keyword, weight, reason in checks:
        if keyword in text:
            score += weight
            report.append(f"+{weight}: {reason}")

    for keyword, penalty, reason in penalties:
        if keyword in text:
            score += penalty
            report.append(f"{penalty}: {reason}")

    return score, report

# --- –ó–∞–ø—Ä–æ—Å –∫ GPT-4 —á–µ—Ä–µ–∑ OpenRouter ---
def ask_gpt(prompt, api_key):
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://your-app-name.streamlit.app",  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Streamlit URL –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
        "X-Title": "Resume Scoring App"
    }

    data = {
        "model": "openai/gpt-4",
        "messages": [{"role": "user", "content": prompt}]
    }

    response = requests.post("https://openrouter.ai/api/v1/chat/completions", json=data, headers=headers)
    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        return f"–û—à–∏–±–∫–∞ –æ—Ç API: {response.status_code} - {response.text}"

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
st.set_page_config(page_title="–û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—é–º–µ", layout="centered")
st.title("üìÑ –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—é–º–µ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏—Å—Ç–∞")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF-—Ñ–∞–π–ª —Ä–µ–∑—é–º–µ", type="pdf")

if uploaded_file:
    resume_text = extract_text_from_pdf(uploaded_file)
    st.subheader("üìù –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
    st.text_area("–¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ", resume_text[:3000], height=300)

    score, report = score_resume(resume_text)

    if score == -999:
        st.error("‚ùå –ê–≤—Ç–æ–æ—Ç–∫–∞–∑: –ö–∞–Ω–¥–∏–¥–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ ¬´–†–∞—Ä—É—Å¬ª –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è")
    else:
        st.subheader(f"üî¢ –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {score} –±–∞–ª–ª–æ–≤")

        if score >= 30:
            st.success("‚úÖ –†–µ–∑—é–º–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ (–≤—ã—Å–æ–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)")
        elif 15 <= score < 30:
            st.warning("üü° –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ‚Äî —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ")
        else:
            st.error("‚ùå –†–µ–∑—é–º–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")

        st.subheader("üìå –ü—Ä–∏—á–∏–Ω—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:")
        for line in report:
            st.markdown(f"- {line}")

    st.divider()
    st.subheader("ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò –ø–æ —Ä–µ–∑—é–º–µ")
    user_question = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∫ –ò–ò")

    if st.button("–°–ø—Ä–æ—Å–∏—Ç—å —É GPT") and user_question.strip():
        openai_api_key = st.secrets["openai"]["openai_api_key"]
        with st.spinner("GPT –¥—É–º–∞–µ—Ç..."):
            ai_response = ask_gpt(f"–í–æ—Ç —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ:\n{resume_text}\n\n–í–æ–ø—Ä–æ—Å: {user_question}", api_key)
            st.markdown("**–û—Ç–≤–µ—Ç:**")
            st.write(ai_response)
else:
    st.info("‚¨ÜÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF-—Ñ–∞–π–ª —Ä–µ–∑—é–º–µ")
